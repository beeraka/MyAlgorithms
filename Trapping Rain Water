/***
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.
Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9
***/


public class TrappingRainWater {

	public static void main(String[] args) {
		//int[] arr = { 1, 8, 6, 2, 5, 4, 8, 3, 7 };
		int arr[] = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};

		TrappingRainWater trappingRainWater = new TrappingRainWater();
		trappingRainWater.FindMostWater(arr);
	}

	private void FindMostWater(int[] arr) {

		int left_max = 0;
		int right_max = 0;
		int left = 0;
		int right = arr.length - 1;
		
		int ans=0;
	


		while (left < right) {

			if (arr[left] < arr[right]) {
				if (arr[left] > left_max) {
					left_max = arr[left];
					} else{
						ans=ans+left_max-arr[left];
					}
				left++;

			} else {

				if (arr[right] > right_max) {
					right_max = arr[right];
				} else{
					ans=ans+right_max-arr[right];
				}
				right--;	
			}

		}

		System.out.println("Most water contained " + ans );

	}

}
