/***
Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.

Example 1:

Input: intervals = [[0,30],[5,10],[15,20]]
Output: 2
Example 2:
Input: intervals = [[7,10],[2,4]]
Output: 1

***/


class Solution {
    public int minMeetingRooms(int[][] intervals) {
       // Check for the base case. If there are no intervals, return 0
    if (intervals.length == 0) {
      return 0;
    }

    // Min heap
    PriorityQueue<int[]> allocator =
        new PriorityQueue<int[]>(
        
            new Comparator<int[]>() {
              public int compare(int[] a, int[] b) {
                return a[1] - b[1];
              }
            });

    // Sort the intervals by start time
    Arrays.sort(
        intervals,
        new Comparator<int[]>() {
          public int compare(final int[] a, final int[] b) {
            return a[0] - b[0];
          }
        });

    // Add the first meeting
    allocator.add(intervals[0][1]);

    // Iterate over remaining intervals
    for (int i = 1; i < intervals.length; i++) {

      int[] curr= intervals[i];
        int[] prev= allocator.poll();
      if (curr[0] < prev[1]) {
        allocator.add(curr);
          allocator.add(prev);
      }else{
          prev[1]=curr[1];
           allocator.add(prev);
      }

    }

    // The size of the heap tells us the minimum rooms required for all the meetings.
    return allocator.size();  
    }
}
