public int[] searchRange1(int[] nums, int target) {
		int left = binarySearchFirstPos(nums, target);
		int right = binarySearchEndPos(nums, target);

		if (left < nums.length && nums[left] == target) {
			return new int[] { left, right };
		}

		return new int[] { -1, -1 };
	}

	private int binarySearchFirstPos(int[] nums, int target) {
		int index = -1;

		int left = 0, right = nums.length - 1;

		while (left <= right) {
			int mid = left + (right - left) / 2;

			if (nums[mid] >= target) {

				right = mid - 1;
			} else {
				left = mid + 1;
			}

			if (nums[mid] == target) {
				index = mid;
			}
		}

		return index;
	}

	private int binarySearchEndPos(int[] nums, int target) {
		int index = -1;

		int left = 0, right = nums.length - 1;

		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (nums[mid] <= target) {
				left = mid + 1;
			} else {
				right = mid - 1;
			}

			if (nums[mid] == target) {
				index = mid;
			}

		}

		return index;
	}
	
	
